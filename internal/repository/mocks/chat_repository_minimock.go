// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i chat-server/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckChatExists          func(ctx context.Context, chatId int64) (b1 bool, err error)
	funcCheckChatExistsOrigin    string
	inspectFuncCheckChatExists   func(ctx context.Context, chatId int64)
	afterCheckChatExistsCounter  uint64
	beforeCheckChatExistsCounter uint64
	CheckChatExistsMock          mChatRepositoryMockCheckChatExists

	funcCreateChat          func(ctx context.Context) (i1 int64, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcDeleteChat          func(ctx context.Context, chatId int64) (err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, chatId int64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckChatExistsMock = mChatRepositoryMockCheckChatExists{mock: m}
	m.CheckChatExistsMock.callArgs = []*ChatRepositoryMockCheckChatExistsParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockCheckChatExists struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCheckChatExistsExpectation
	expectations       []*ChatRepositoryMockCheckChatExistsExpectation

	callArgs []*ChatRepositoryMockCheckChatExistsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCheckChatExistsExpectation specifies expectation struct of the ChatRepository.CheckChatExists
type ChatRepositoryMockCheckChatExistsExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCheckChatExistsParams
	paramPtrs          *ChatRepositoryMockCheckChatExistsParamPtrs
	expectationOrigins ChatRepositoryMockCheckChatExistsExpectationOrigins
	results            *ChatRepositoryMockCheckChatExistsResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCheckChatExistsParams contains parameters of the ChatRepository.CheckChatExists
type ChatRepositoryMockCheckChatExistsParams struct {
	ctx    context.Context
	chatId int64
}

// ChatRepositoryMockCheckChatExistsParamPtrs contains pointers to parameters of the ChatRepository.CheckChatExists
type ChatRepositoryMockCheckChatExistsParamPtrs struct {
	ctx    *context.Context
	chatId *int64
}

// ChatRepositoryMockCheckChatExistsResults contains results of the ChatRepository.CheckChatExists
type ChatRepositoryMockCheckChatExistsResults struct {
	b1  bool
	err error
}

// ChatRepositoryMockCheckChatExistsOrigins contains origins of expectations of the ChatRepository.CheckChatExists
type ChatRepositoryMockCheckChatExistsExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Optional() *mChatRepositoryMockCheckChatExists {
	mmCheckChatExists.optional = true
	return mmCheckChatExists
}

// Expect sets up expected params for ChatRepository.CheckChatExists
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Expect(ctx context.Context, chatId int64) *mChatRepositoryMockCheckChatExists {
	if mmCheckChatExists.mock.funcCheckChatExists != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Set")
	}

	if mmCheckChatExists.defaultExpectation == nil {
		mmCheckChatExists.defaultExpectation = &ChatRepositoryMockCheckChatExistsExpectation{}
	}

	if mmCheckChatExists.defaultExpectation.paramPtrs != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by ExpectParams functions")
	}

	mmCheckChatExists.defaultExpectation.params = &ChatRepositoryMockCheckChatExistsParams{ctx, chatId}
	mmCheckChatExists.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCheckChatExists.expectations {
		if minimock.Equal(e.params, mmCheckChatExists.defaultExpectation.params) {
			mmCheckChatExists.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckChatExists.defaultExpectation.params)
		}
	}

	return mmCheckChatExists
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CheckChatExists
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCheckChatExists {
	if mmCheckChatExists.mock.funcCheckChatExists != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Set")
	}

	if mmCheckChatExists.defaultExpectation == nil {
		mmCheckChatExists.defaultExpectation = &ChatRepositoryMockCheckChatExistsExpectation{}
	}

	if mmCheckChatExists.defaultExpectation.params != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Expect")
	}

	if mmCheckChatExists.defaultExpectation.paramPtrs == nil {
		mmCheckChatExists.defaultExpectation.paramPtrs = &ChatRepositoryMockCheckChatExistsParamPtrs{}
	}
	mmCheckChatExists.defaultExpectation.paramPtrs.ctx = &ctx
	mmCheckChatExists.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCheckChatExists
}

// ExpectChatIdParam2 sets up expected param chatId for ChatRepository.CheckChatExists
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) ExpectChatIdParam2(chatId int64) *mChatRepositoryMockCheckChatExists {
	if mmCheckChatExists.mock.funcCheckChatExists != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Set")
	}

	if mmCheckChatExists.defaultExpectation == nil {
		mmCheckChatExists.defaultExpectation = &ChatRepositoryMockCheckChatExistsExpectation{}
	}

	if mmCheckChatExists.defaultExpectation.params != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Expect")
	}

	if mmCheckChatExists.defaultExpectation.paramPtrs == nil {
		mmCheckChatExists.defaultExpectation.paramPtrs = &ChatRepositoryMockCheckChatExistsParamPtrs{}
	}
	mmCheckChatExists.defaultExpectation.paramPtrs.chatId = &chatId
	mmCheckChatExists.defaultExpectation.expectationOrigins.originChatId = minimock.CallerInfo(1)

	return mmCheckChatExists
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CheckChatExists
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Inspect(f func(ctx context.Context, chatId int64)) *mChatRepositoryMockCheckChatExists {
	if mmCheckChatExists.mock.inspectFuncCheckChatExists != nil {
		mmCheckChatExists.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CheckChatExists")
	}

	mmCheckChatExists.mock.inspectFuncCheckChatExists = f

	return mmCheckChatExists
}

// Return sets up results that will be returned by ChatRepository.CheckChatExists
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Return(b1 bool, err error) *ChatRepositoryMock {
	if mmCheckChatExists.mock.funcCheckChatExists != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Set")
	}

	if mmCheckChatExists.defaultExpectation == nil {
		mmCheckChatExists.defaultExpectation = &ChatRepositoryMockCheckChatExistsExpectation{mock: mmCheckChatExists.mock}
	}
	mmCheckChatExists.defaultExpectation.results = &ChatRepositoryMockCheckChatExistsResults{b1, err}
	mmCheckChatExists.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCheckChatExists.mock
}

// Set uses given function f to mock the ChatRepository.CheckChatExists method
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Set(f func(ctx context.Context, chatId int64) (b1 bool, err error)) *ChatRepositoryMock {
	if mmCheckChatExists.defaultExpectation != nil {
		mmCheckChatExists.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CheckChatExists method")
	}

	if len(mmCheckChatExists.expectations) > 0 {
		mmCheckChatExists.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CheckChatExists method")
	}

	mmCheckChatExists.mock.funcCheckChatExists = f
	mmCheckChatExists.mock.funcCheckChatExistsOrigin = minimock.CallerInfo(1)
	return mmCheckChatExists.mock
}

// When sets expectation for the ChatRepository.CheckChatExists which will trigger the result defined by the following
// Then helper
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) When(ctx context.Context, chatId int64) *ChatRepositoryMockCheckChatExistsExpectation {
	if mmCheckChatExists.mock.funcCheckChatExists != nil {
		mmCheckChatExists.mock.t.Fatalf("ChatRepositoryMock.CheckChatExists mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCheckChatExistsExpectation{
		mock:               mmCheckChatExists.mock,
		params:             &ChatRepositoryMockCheckChatExistsParams{ctx, chatId},
		expectationOrigins: ChatRepositoryMockCheckChatExistsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCheckChatExists.expectations = append(mmCheckChatExists.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CheckChatExists return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCheckChatExistsExpectation) Then(b1 bool, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCheckChatExistsResults{b1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CheckChatExists should be invoked
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Times(n uint64) *mChatRepositoryMockCheckChatExists {
	if n == 0 {
		mmCheckChatExists.mock.t.Fatalf("Times of ChatRepositoryMock.CheckChatExists mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckChatExists.expectedInvocations, n)
	mmCheckChatExists.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCheckChatExists
}

func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) invocationsDone() bool {
	if len(mmCheckChatExists.expectations) == 0 && mmCheckChatExists.defaultExpectation == nil && mmCheckChatExists.mock.funcCheckChatExists == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckChatExists.mock.afterCheckChatExistsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckChatExists.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckChatExists implements mm_repository.ChatRepository
func (mmCheckChatExists *ChatRepositoryMock) CheckChatExists(ctx context.Context, chatId int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmCheckChatExists.beforeCheckChatExistsCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckChatExists.afterCheckChatExistsCounter, 1)

	mmCheckChatExists.t.Helper()

	if mmCheckChatExists.inspectFuncCheckChatExists != nil {
		mmCheckChatExists.inspectFuncCheckChatExists(ctx, chatId)
	}

	mm_params := ChatRepositoryMockCheckChatExistsParams{ctx, chatId}

	// Record call args
	mmCheckChatExists.CheckChatExistsMock.mutex.Lock()
	mmCheckChatExists.CheckChatExistsMock.callArgs = append(mmCheckChatExists.CheckChatExistsMock.callArgs, &mm_params)
	mmCheckChatExists.CheckChatExistsMock.mutex.Unlock()

	for _, e := range mmCheckChatExists.CheckChatExistsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmCheckChatExists.CheckChatExistsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckChatExists.CheckChatExistsMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckChatExists.CheckChatExistsMock.defaultExpectation.params
		mm_want_ptrs := mmCheckChatExists.CheckChatExistsMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCheckChatExistsParams{ctx, chatId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheckChatExists.t.Errorf("ChatRepositoryMock.CheckChatExists got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckChatExists.CheckChatExistsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatId != nil && !minimock.Equal(*mm_want_ptrs.chatId, mm_got.chatId) {
				mmCheckChatExists.t.Errorf("ChatRepositoryMock.CheckChatExists got unexpected parameter chatId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckChatExists.CheckChatExistsMock.defaultExpectation.expectationOrigins.originChatId, *mm_want_ptrs.chatId, mm_got.chatId, minimock.Diff(*mm_want_ptrs.chatId, mm_got.chatId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckChatExists.t.Errorf("ChatRepositoryMock.CheckChatExists got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCheckChatExists.CheckChatExistsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckChatExists.CheckChatExistsMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckChatExists.t.Fatal("No results are set for the ChatRepositoryMock.CheckChatExists")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmCheckChatExists.funcCheckChatExists != nil {
		return mmCheckChatExists.funcCheckChatExists(ctx, chatId)
	}
	mmCheckChatExists.t.Fatalf("Unexpected call to ChatRepositoryMock.CheckChatExists. %v %v", ctx, chatId)
	return
}

// CheckChatExistsAfterCounter returns a count of finished ChatRepositoryMock.CheckChatExists invocations
func (mmCheckChatExists *ChatRepositoryMock) CheckChatExistsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckChatExists.afterCheckChatExistsCounter)
}

// CheckChatExistsBeforeCounter returns a count of ChatRepositoryMock.CheckChatExists invocations
func (mmCheckChatExists *ChatRepositoryMock) CheckChatExistsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckChatExists.beforeCheckChatExistsCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CheckChatExists.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckChatExists *mChatRepositoryMockCheckChatExists) Calls() []*ChatRepositoryMockCheckChatExistsParams {
	mmCheckChatExists.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCheckChatExistsParams, len(mmCheckChatExists.callArgs))
	copy(argCopy, mmCheckChatExists.callArgs)

	mmCheckChatExists.mutex.RUnlock()

	return argCopy
}

// MinimockCheckChatExistsDone returns true if the count of the CheckChatExists invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCheckChatExistsDone() bool {
	if m.CheckChatExistsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckChatExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckChatExistsMock.invocationsDone()
}

// MinimockCheckChatExistsInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCheckChatExistsInspect() {
	for _, e := range m.CheckChatExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CheckChatExists at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCheckChatExistsCounter := mm_atomic.LoadUint64(&m.afterCheckChatExistsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckChatExistsMock.defaultExpectation != nil && afterCheckChatExistsCounter < 1 {
		if m.CheckChatExistsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CheckChatExists at\n%s", m.CheckChatExistsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CheckChatExists at\n%s with params: %#v", m.CheckChatExistsMock.defaultExpectation.expectationOrigins.origin, *m.CheckChatExistsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckChatExists != nil && afterCheckChatExistsCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CheckChatExists at\n%s", m.funcCheckChatExistsOrigin)
	}

	if !m.CheckChatExistsMock.invocationsDone() && afterCheckChatExistsCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CheckChatExists at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CheckChatExistsMock.expectedInvocations), m.CheckChatExistsMock.expectedInvocationsOrigin, afterCheckChatExistsCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateChatParams
	paramPtrs          *ChatRepositoryMockCreateChatParamPtrs
	expectationOrigins ChatRepositoryMockCreateChatExpectationOrigins
	results            *ChatRepositoryMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx context.Context
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx *context.Context
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateChatOrigins contains origins of expectations of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &ChatRepositoryMockCreateChatParams{ctx},
		expectationOrigins: ChatRepositoryMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v", ctx)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mChatRepositoryMockDeleteChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteChatParams
	paramPtrs          *ChatRepositoryMockDeleteChatParamPtrs
	expectationOrigins ChatRepositoryMockDeleteChatExpectationOrigins
	results            *ChatRepositoryMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx    context.Context
	chatId int64
}

// ChatRepositoryMockDeleteChatParamPtrs contains pointers to parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParamPtrs struct {
	ctx    *context.Context
	chatId *int64
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	err error
}

// ChatRepositoryMockDeleteChatOrigins contains origins of expectations of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Optional() *mChatRepositoryMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, chatId int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, chatId}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectChatIdParam2 sets up expected param chatId for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectChatIdParam2(chatId int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.chatId = &chatId
	mmDeleteChat.defaultExpectation.expectationOrigins.originChatId = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, chatId int64)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, chatId int64) (err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, chatId int64) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &ChatRepositoryMockDeleteChatParams{ctx, chatId},
		expectationOrigins: ChatRepositoryMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.DeleteChat should be invoked
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Times(n uint64) *mChatRepositoryMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of ChatRepositoryMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mChatRepositoryMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, chatId int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, chatId)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, chatId}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteChatParams{ctx, chatId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatId != nil && !minimock.Equal(*mm_want_ptrs.chatId, mm_got.chatId) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter chatId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originChatId, *mm_want_ptrs.chatId, mm_got.chatId, minimock.Diff(*mm_want_ptrs.chatId, mm_got.chatId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, chatId)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, chatId)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckChatExistsInspect()

			m.MinimockCreateChatInspect()

			m.MinimockDeleteChatInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckChatExistsDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockDeleteChatDone()
}
