// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i chat-server/internal/repository.MembersRepository -o members_repository_minimock.go -n MembersRepositoryMock -p mocks

import (
	"github.com/t1pcrips/chat-service/internal/model"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MembersRepositoryMock implements mm_repository.MembersRepository
type MembersRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckMemberExists          func(ctx context.Context, userName string) (b1 bool, err error)
	funcCheckMemberExistsOrigin    string
	inspectFuncCheckMemberExists   func(ctx context.Context, userName string)
	afterCheckMemberExistsCounter  uint64
	beforeCheckMemberExistsCounter uint64
	CheckMemberExistsMock          mMembersRepositoryMockCheckMemberExists

	funcCreateMember          func(ctx context.Context, info *model.CreateMemberRequest) (err error)
	funcCreateMemberOrigin    string
	inspectFuncCreateMember   func(ctx context.Context, info *model.CreateMemberRequest)
	afterCreateMemberCounter  uint64
	beforeCreateMemberCounter uint64
	CreateMemberMock          mMembersRepositoryMockCreateMember
}

// NewMembersRepositoryMock returns a mock for mm_repository.MembersRepository
func NewMembersRepositoryMock(t minimock.Tester) *MembersRepositoryMock {
	m := &MembersRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckMemberExistsMock = mMembersRepositoryMockCheckMemberExists{mock: m}
	m.CheckMemberExistsMock.callArgs = []*MembersRepositoryMockCheckMemberExistsParams{}

	m.CreateMemberMock = mMembersRepositoryMockCreateMember{mock: m}
	m.CreateMemberMock.callArgs = []*MembersRepositoryMockCreateMemberParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMembersRepositoryMockCheckMemberExists struct {
	optional           bool
	mock               *MembersRepositoryMock
	defaultExpectation *MembersRepositoryMockCheckMemberExistsExpectation
	expectations       []*MembersRepositoryMockCheckMemberExistsExpectation

	callArgs []*MembersRepositoryMockCheckMemberExistsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MembersRepositoryMockCheckMemberExistsExpectation specifies expectation struct of the MembersRepository.CheckMemberExists
type MembersRepositoryMockCheckMemberExistsExpectation struct {
	mock               *MembersRepositoryMock
	params             *MembersRepositoryMockCheckMemberExistsParams
	paramPtrs          *MembersRepositoryMockCheckMemberExistsParamPtrs
	expectationOrigins MembersRepositoryMockCheckMemberExistsExpectationOrigins
	results            *MembersRepositoryMockCheckMemberExistsResults
	returnOrigin       string
	Counter            uint64
}

// MembersRepositoryMockCheckMemberExistsParams contains parameters of the MembersRepository.CheckMemberExists
type MembersRepositoryMockCheckMemberExistsParams struct {
	ctx      context.Context
	userName string
}

// MembersRepositoryMockCheckMemberExistsParamPtrs contains pointers to parameters of the MembersRepository.CheckMemberExists
type MembersRepositoryMockCheckMemberExistsParamPtrs struct {
	ctx      *context.Context
	userName *string
}

// MembersRepositoryMockCheckMemberExistsResults contains results of the MembersRepository.CheckMemberExists
type MembersRepositoryMockCheckMemberExistsResults struct {
	b1  bool
	err error
}

// MembersRepositoryMockCheckMemberExistsOrigins contains origins of expectations of the MembersRepository.CheckMemberExists
type MembersRepositoryMockCheckMemberExistsExpectationOrigins struct {
	origin         string
	originCtx      string
	originUserName string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Optional() *mMembersRepositoryMockCheckMemberExists {
	mmCheckMemberExists.optional = true
	return mmCheckMemberExists
}

// Expect sets up expected params for MembersRepository.CheckMemberExists
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Expect(ctx context.Context, userName string) *mMembersRepositoryMockCheckMemberExists {
	if mmCheckMemberExists.mock.funcCheckMemberExists != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Set")
	}

	if mmCheckMemberExists.defaultExpectation == nil {
		mmCheckMemberExists.defaultExpectation = &MembersRepositoryMockCheckMemberExistsExpectation{}
	}

	if mmCheckMemberExists.defaultExpectation.paramPtrs != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by ExpectParams functions")
	}

	mmCheckMemberExists.defaultExpectation.params = &MembersRepositoryMockCheckMemberExistsParams{ctx, userName}
	mmCheckMemberExists.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCheckMemberExists.expectations {
		if minimock.Equal(e.params, mmCheckMemberExists.defaultExpectation.params) {
			mmCheckMemberExists.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckMemberExists.defaultExpectation.params)
		}
	}

	return mmCheckMemberExists
}

// ExpectCtxParam1 sets up expected param ctx for MembersRepository.CheckMemberExists
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) ExpectCtxParam1(ctx context.Context) *mMembersRepositoryMockCheckMemberExists {
	if mmCheckMemberExists.mock.funcCheckMemberExists != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Set")
	}

	if mmCheckMemberExists.defaultExpectation == nil {
		mmCheckMemberExists.defaultExpectation = &MembersRepositoryMockCheckMemberExistsExpectation{}
	}

	if mmCheckMemberExists.defaultExpectation.params != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Expect")
	}

	if mmCheckMemberExists.defaultExpectation.paramPtrs == nil {
		mmCheckMemberExists.defaultExpectation.paramPtrs = &MembersRepositoryMockCheckMemberExistsParamPtrs{}
	}
	mmCheckMemberExists.defaultExpectation.paramPtrs.ctx = &ctx
	mmCheckMemberExists.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCheckMemberExists
}

// ExpectUserNameParam2 sets up expected param userName for MembersRepository.CheckMemberExists
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) ExpectUserNameParam2(userName string) *mMembersRepositoryMockCheckMemberExists {
	if mmCheckMemberExists.mock.funcCheckMemberExists != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Set")
	}

	if mmCheckMemberExists.defaultExpectation == nil {
		mmCheckMemberExists.defaultExpectation = &MembersRepositoryMockCheckMemberExistsExpectation{}
	}

	if mmCheckMemberExists.defaultExpectation.params != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Expect")
	}

	if mmCheckMemberExists.defaultExpectation.paramPtrs == nil {
		mmCheckMemberExists.defaultExpectation.paramPtrs = &MembersRepositoryMockCheckMemberExistsParamPtrs{}
	}
	mmCheckMemberExists.defaultExpectation.paramPtrs.userName = &userName
	mmCheckMemberExists.defaultExpectation.expectationOrigins.originUserName = minimock.CallerInfo(1)

	return mmCheckMemberExists
}

// Inspect accepts an inspector function that has same arguments as the MembersRepository.CheckMemberExists
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Inspect(f func(ctx context.Context, userName string)) *mMembersRepositoryMockCheckMemberExists {
	if mmCheckMemberExists.mock.inspectFuncCheckMemberExists != nil {
		mmCheckMemberExists.mock.t.Fatalf("Inspect function is already set for MembersRepositoryMock.CheckMemberExists")
	}

	mmCheckMemberExists.mock.inspectFuncCheckMemberExists = f

	return mmCheckMemberExists
}

// Return sets up results that will be returned by MembersRepository.CheckMemberExists
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Return(b1 bool, err error) *MembersRepositoryMock {
	if mmCheckMemberExists.mock.funcCheckMemberExists != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Set")
	}

	if mmCheckMemberExists.defaultExpectation == nil {
		mmCheckMemberExists.defaultExpectation = &MembersRepositoryMockCheckMemberExistsExpectation{mock: mmCheckMemberExists.mock}
	}
	mmCheckMemberExists.defaultExpectation.results = &MembersRepositoryMockCheckMemberExistsResults{b1, err}
	mmCheckMemberExists.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCheckMemberExists.mock
}

// Set uses given function f to mock the MembersRepository.CheckMemberExists method
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Set(f func(ctx context.Context, userName string) (b1 bool, err error)) *MembersRepositoryMock {
	if mmCheckMemberExists.defaultExpectation != nil {
		mmCheckMemberExists.mock.t.Fatalf("Default expectation is already set for the MembersRepository.CheckMemberExists method")
	}

	if len(mmCheckMemberExists.expectations) > 0 {
		mmCheckMemberExists.mock.t.Fatalf("Some expectations are already set for the MembersRepository.CheckMemberExists method")
	}

	mmCheckMemberExists.mock.funcCheckMemberExists = f
	mmCheckMemberExists.mock.funcCheckMemberExistsOrigin = minimock.CallerInfo(1)
	return mmCheckMemberExists.mock
}

// When sets expectation for the MembersRepository.CheckMemberExists which will trigger the result defined by the following
// Then helper
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) When(ctx context.Context, userName string) *MembersRepositoryMockCheckMemberExistsExpectation {
	if mmCheckMemberExists.mock.funcCheckMemberExists != nil {
		mmCheckMemberExists.mock.t.Fatalf("MembersRepositoryMock.CheckMemberExists mock is already set by Set")
	}

	expectation := &MembersRepositoryMockCheckMemberExistsExpectation{
		mock:               mmCheckMemberExists.mock,
		params:             &MembersRepositoryMockCheckMemberExistsParams{ctx, userName},
		expectationOrigins: MembersRepositoryMockCheckMemberExistsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCheckMemberExists.expectations = append(mmCheckMemberExists.expectations, expectation)
	return expectation
}

// Then sets up MembersRepository.CheckMemberExists return parameters for the expectation previously defined by the When method
func (e *MembersRepositoryMockCheckMemberExistsExpectation) Then(b1 bool, err error) *MembersRepositoryMock {
	e.results = &MembersRepositoryMockCheckMemberExistsResults{b1, err}
	return e.mock
}

// Times sets number of times MembersRepository.CheckMemberExists should be invoked
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Times(n uint64) *mMembersRepositoryMockCheckMemberExists {
	if n == 0 {
		mmCheckMemberExists.mock.t.Fatalf("Times of MembersRepositoryMock.CheckMemberExists mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckMemberExists.expectedInvocations, n)
	mmCheckMemberExists.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCheckMemberExists
}

func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) invocationsDone() bool {
	if len(mmCheckMemberExists.expectations) == 0 && mmCheckMemberExists.defaultExpectation == nil && mmCheckMemberExists.mock.funcCheckMemberExists == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckMemberExists.mock.afterCheckMemberExistsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckMemberExists.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckMemberExists implements mm_repository.MembersRepository
func (mmCheckMemberExists *MembersRepositoryMock) CheckMemberExists(ctx context.Context, userName string) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmCheckMemberExists.beforeCheckMemberExistsCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckMemberExists.afterCheckMemberExistsCounter, 1)

	mmCheckMemberExists.t.Helper()

	if mmCheckMemberExists.inspectFuncCheckMemberExists != nil {
		mmCheckMemberExists.inspectFuncCheckMemberExists(ctx, userName)
	}

	mm_params := MembersRepositoryMockCheckMemberExistsParams{ctx, userName}

	// Record call args
	mmCheckMemberExists.CheckMemberExistsMock.mutex.Lock()
	mmCheckMemberExists.CheckMemberExistsMock.callArgs = append(mmCheckMemberExists.CheckMemberExistsMock.callArgs, &mm_params)
	mmCheckMemberExists.CheckMemberExistsMock.mutex.Unlock()

	for _, e := range mmCheckMemberExists.CheckMemberExistsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.params
		mm_want_ptrs := mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.paramPtrs

		mm_got := MembersRepositoryMockCheckMemberExistsParams{ctx, userName}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheckMemberExists.t.Errorf("MembersRepositoryMock.CheckMemberExists got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userName != nil && !minimock.Equal(*mm_want_ptrs.userName, mm_got.userName) {
				mmCheckMemberExists.t.Errorf("MembersRepositoryMock.CheckMemberExists got unexpected parameter userName, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.expectationOrigins.originUserName, *mm_want_ptrs.userName, mm_got.userName, minimock.Diff(*mm_want_ptrs.userName, mm_got.userName))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckMemberExists.t.Errorf("MembersRepositoryMock.CheckMemberExists got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckMemberExists.CheckMemberExistsMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckMemberExists.t.Fatal("No results are set for the MembersRepositoryMock.CheckMemberExists")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmCheckMemberExists.funcCheckMemberExists != nil {
		return mmCheckMemberExists.funcCheckMemberExists(ctx, userName)
	}
	mmCheckMemberExists.t.Fatalf("Unexpected call to MembersRepositoryMock.CheckMemberExists. %v %v", ctx, userName)
	return
}

// CheckMemberExistsAfterCounter returns a count of finished MembersRepositoryMock.CheckMemberExists invocations
func (mmCheckMemberExists *MembersRepositoryMock) CheckMemberExistsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckMemberExists.afterCheckMemberExistsCounter)
}

// CheckMemberExistsBeforeCounter returns a count of MembersRepositoryMock.CheckMemberExists invocations
func (mmCheckMemberExists *MembersRepositoryMock) CheckMemberExistsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckMemberExists.beforeCheckMemberExistsCounter)
}

// Calls returns a list of arguments used in each call to MembersRepositoryMock.CheckMemberExists.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckMemberExists *mMembersRepositoryMockCheckMemberExists) Calls() []*MembersRepositoryMockCheckMemberExistsParams {
	mmCheckMemberExists.mutex.RLock()

	argCopy := make([]*MembersRepositoryMockCheckMemberExistsParams, len(mmCheckMemberExists.callArgs))
	copy(argCopy, mmCheckMemberExists.callArgs)

	mmCheckMemberExists.mutex.RUnlock()

	return argCopy
}

// MinimockCheckMemberExistsDone returns true if the count of the CheckMemberExists invocations corresponds
// the number of defined expectations
func (m *MembersRepositoryMock) MinimockCheckMemberExistsDone() bool {
	if m.CheckMemberExistsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckMemberExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckMemberExistsMock.invocationsDone()
}

// MinimockCheckMemberExistsInspect logs each unmet expectation
func (m *MembersRepositoryMock) MinimockCheckMemberExistsInspect() {
	for _, e := range m.CheckMemberExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MembersRepositoryMock.CheckMemberExists at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCheckMemberExistsCounter := mm_atomic.LoadUint64(&m.afterCheckMemberExistsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMemberExistsMock.defaultExpectation != nil && afterCheckMemberExistsCounter < 1 {
		if m.CheckMemberExistsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MembersRepositoryMock.CheckMemberExists at\n%s", m.CheckMemberExistsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MembersRepositoryMock.CheckMemberExists at\n%s with params: %#v", m.CheckMemberExistsMock.defaultExpectation.expectationOrigins.origin, *m.CheckMemberExistsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckMemberExists != nil && afterCheckMemberExistsCounter < 1 {
		m.t.Errorf("Expected call to MembersRepositoryMock.CheckMemberExists at\n%s", m.funcCheckMemberExistsOrigin)
	}

	if !m.CheckMemberExistsMock.invocationsDone() && afterCheckMemberExistsCounter > 0 {
		m.t.Errorf("Expected %d calls to MembersRepositoryMock.CheckMemberExists at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CheckMemberExistsMock.expectedInvocations), m.CheckMemberExistsMock.expectedInvocationsOrigin, afterCheckMemberExistsCounter)
	}
}

type mMembersRepositoryMockCreateMember struct {
	optional           bool
	mock               *MembersRepositoryMock
	defaultExpectation *MembersRepositoryMockCreateMemberExpectation
	expectations       []*MembersRepositoryMockCreateMemberExpectation

	callArgs []*MembersRepositoryMockCreateMemberParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MembersRepositoryMockCreateMemberExpectation specifies expectation struct of the MembersRepository.CreateMember
type MembersRepositoryMockCreateMemberExpectation struct {
	mock               *MembersRepositoryMock
	params             *MembersRepositoryMockCreateMemberParams
	paramPtrs          *MembersRepositoryMockCreateMemberParamPtrs
	expectationOrigins MembersRepositoryMockCreateMemberExpectationOrigins
	results            *MembersRepositoryMockCreateMemberResults
	returnOrigin       string
	Counter            uint64
}

// MembersRepositoryMockCreateMemberParams contains parameters of the MembersRepository.CreateMember
type MembersRepositoryMockCreateMemberParams struct {
	ctx  context.Context
	info *model.CreateMemberRequest
}

// MembersRepositoryMockCreateMemberParamPtrs contains pointers to parameters of the MembersRepository.CreateMember
type MembersRepositoryMockCreateMemberParamPtrs struct {
	ctx  *context.Context
	info **model.CreateMemberRequest
}

// MembersRepositoryMockCreateMemberResults contains results of the MembersRepository.CreateMember
type MembersRepositoryMockCreateMemberResults struct {
	err error
}

// MembersRepositoryMockCreateMemberOrigins contains origins of expectations of the MembersRepository.CreateMember
type MembersRepositoryMockCreateMemberExpectationOrigins struct {
	origin     string
	originCtx  string
	originInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateMember *mMembersRepositoryMockCreateMember) Optional() *mMembersRepositoryMockCreateMember {
	mmCreateMember.optional = true
	return mmCreateMember
}

// Expect sets up expected params for MembersRepository.CreateMember
func (mmCreateMember *mMembersRepositoryMockCreateMember) Expect(ctx context.Context, info *model.CreateMemberRequest) *mMembersRepositoryMockCreateMember {
	if mmCreateMember.mock.funcCreateMember != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Set")
	}

	if mmCreateMember.defaultExpectation == nil {
		mmCreateMember.defaultExpectation = &MembersRepositoryMockCreateMemberExpectation{}
	}

	if mmCreateMember.defaultExpectation.paramPtrs != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by ExpectParams functions")
	}

	mmCreateMember.defaultExpectation.params = &MembersRepositoryMockCreateMemberParams{ctx, info}
	mmCreateMember.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateMember.expectations {
		if minimock.Equal(e.params, mmCreateMember.defaultExpectation.params) {
			mmCreateMember.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateMember.defaultExpectation.params)
		}
	}

	return mmCreateMember
}

// ExpectCtxParam1 sets up expected param ctx for MembersRepository.CreateMember
func (mmCreateMember *mMembersRepositoryMockCreateMember) ExpectCtxParam1(ctx context.Context) *mMembersRepositoryMockCreateMember {
	if mmCreateMember.mock.funcCreateMember != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Set")
	}

	if mmCreateMember.defaultExpectation == nil {
		mmCreateMember.defaultExpectation = &MembersRepositoryMockCreateMemberExpectation{}
	}

	if mmCreateMember.defaultExpectation.params != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Expect")
	}

	if mmCreateMember.defaultExpectation.paramPtrs == nil {
		mmCreateMember.defaultExpectation.paramPtrs = &MembersRepositoryMockCreateMemberParamPtrs{}
	}
	mmCreateMember.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateMember.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateMember
}

// ExpectInfoParam2 sets up expected param info for MembersRepository.CreateMember
func (mmCreateMember *mMembersRepositoryMockCreateMember) ExpectInfoParam2(info *model.CreateMemberRequest) *mMembersRepositoryMockCreateMember {
	if mmCreateMember.mock.funcCreateMember != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Set")
	}

	if mmCreateMember.defaultExpectation == nil {
		mmCreateMember.defaultExpectation = &MembersRepositoryMockCreateMemberExpectation{}
	}

	if mmCreateMember.defaultExpectation.params != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Expect")
	}

	if mmCreateMember.defaultExpectation.paramPtrs == nil {
		mmCreateMember.defaultExpectation.paramPtrs = &MembersRepositoryMockCreateMemberParamPtrs{}
	}
	mmCreateMember.defaultExpectation.paramPtrs.info = &info
	mmCreateMember.defaultExpectation.expectationOrigins.originInfo = minimock.CallerInfo(1)

	return mmCreateMember
}

// Inspect accepts an inspector function that has same arguments as the MembersRepository.CreateMember
func (mmCreateMember *mMembersRepositoryMockCreateMember) Inspect(f func(ctx context.Context, info *model.CreateMemberRequest)) *mMembersRepositoryMockCreateMember {
	if mmCreateMember.mock.inspectFuncCreateMember != nil {
		mmCreateMember.mock.t.Fatalf("Inspect function is already set for MembersRepositoryMock.CreateMember")
	}

	mmCreateMember.mock.inspectFuncCreateMember = f

	return mmCreateMember
}

// Return sets up results that will be returned by MembersRepository.CreateMember
func (mmCreateMember *mMembersRepositoryMockCreateMember) Return(err error) *MembersRepositoryMock {
	if mmCreateMember.mock.funcCreateMember != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Set")
	}

	if mmCreateMember.defaultExpectation == nil {
		mmCreateMember.defaultExpectation = &MembersRepositoryMockCreateMemberExpectation{mock: mmCreateMember.mock}
	}
	mmCreateMember.defaultExpectation.results = &MembersRepositoryMockCreateMemberResults{err}
	mmCreateMember.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateMember.mock
}

// Set uses given function f to mock the MembersRepository.CreateMember method
func (mmCreateMember *mMembersRepositoryMockCreateMember) Set(f func(ctx context.Context, info *model.CreateMemberRequest) (err error)) *MembersRepositoryMock {
	if mmCreateMember.defaultExpectation != nil {
		mmCreateMember.mock.t.Fatalf("Default expectation is already set for the MembersRepository.CreateMember method")
	}

	if len(mmCreateMember.expectations) > 0 {
		mmCreateMember.mock.t.Fatalf("Some expectations are already set for the MembersRepository.CreateMember method")
	}

	mmCreateMember.mock.funcCreateMember = f
	mmCreateMember.mock.funcCreateMemberOrigin = minimock.CallerInfo(1)
	return mmCreateMember.mock
}

// When sets expectation for the MembersRepository.CreateMember which will trigger the result defined by the following
// Then helper
func (mmCreateMember *mMembersRepositoryMockCreateMember) When(ctx context.Context, info *model.CreateMemberRequest) *MembersRepositoryMockCreateMemberExpectation {
	if mmCreateMember.mock.funcCreateMember != nil {
		mmCreateMember.mock.t.Fatalf("MembersRepositoryMock.CreateMember mock is already set by Set")
	}

	expectation := &MembersRepositoryMockCreateMemberExpectation{
		mock:               mmCreateMember.mock,
		params:             &MembersRepositoryMockCreateMemberParams{ctx, info},
		expectationOrigins: MembersRepositoryMockCreateMemberExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateMember.expectations = append(mmCreateMember.expectations, expectation)
	return expectation
}

// Then sets up MembersRepository.CreateMember return parameters for the expectation previously defined by the When method
func (e *MembersRepositoryMockCreateMemberExpectation) Then(err error) *MembersRepositoryMock {
	e.results = &MembersRepositoryMockCreateMemberResults{err}
	return e.mock
}

// Times sets number of times MembersRepository.CreateMember should be invoked
func (mmCreateMember *mMembersRepositoryMockCreateMember) Times(n uint64) *mMembersRepositoryMockCreateMember {
	if n == 0 {
		mmCreateMember.mock.t.Fatalf("Times of MembersRepositoryMock.CreateMember mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateMember.expectedInvocations, n)
	mmCreateMember.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateMember
}

func (mmCreateMember *mMembersRepositoryMockCreateMember) invocationsDone() bool {
	if len(mmCreateMember.expectations) == 0 && mmCreateMember.defaultExpectation == nil && mmCreateMember.mock.funcCreateMember == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateMember.mock.afterCreateMemberCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateMember.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateMember implements mm_repository.MembersRepository
func (mmCreateMember *MembersRepositoryMock) CreateMember(ctx context.Context, info *model.CreateMemberRequest) (err error) {
	mm_atomic.AddUint64(&mmCreateMember.beforeCreateMemberCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateMember.afterCreateMemberCounter, 1)

	mmCreateMember.t.Helper()

	if mmCreateMember.inspectFuncCreateMember != nil {
		mmCreateMember.inspectFuncCreateMember(ctx, info)
	}

	mm_params := MembersRepositoryMockCreateMemberParams{ctx, info}

	// Record call args
	mmCreateMember.CreateMemberMock.mutex.Lock()
	mmCreateMember.CreateMemberMock.callArgs = append(mmCreateMember.CreateMemberMock.callArgs, &mm_params)
	mmCreateMember.CreateMemberMock.mutex.Unlock()

	for _, e := range mmCreateMember.CreateMemberMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateMember.CreateMemberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateMember.CreateMemberMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateMember.CreateMemberMock.defaultExpectation.params
		mm_want_ptrs := mmCreateMember.CreateMemberMock.defaultExpectation.paramPtrs

		mm_got := MembersRepositoryMockCreateMemberParams{ctx, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateMember.t.Errorf("MembersRepositoryMock.CreateMember got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMember.CreateMemberMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmCreateMember.t.Errorf("MembersRepositoryMock.CreateMember got unexpected parameter info, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMember.CreateMemberMock.defaultExpectation.expectationOrigins.originInfo, *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateMember.t.Errorf("MembersRepositoryMock.CreateMember got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateMember.CreateMemberMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateMember.CreateMemberMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateMember.t.Fatal("No results are set for the MembersRepositoryMock.CreateMember")
		}
		return (*mm_results).err
	}
	if mmCreateMember.funcCreateMember != nil {
		return mmCreateMember.funcCreateMember(ctx, info)
	}
	mmCreateMember.t.Fatalf("Unexpected call to MembersRepositoryMock.CreateMember. %v %v", ctx, info)
	return
}

// CreateMemberAfterCounter returns a count of finished MembersRepositoryMock.CreateMember invocations
func (mmCreateMember *MembersRepositoryMock) CreateMemberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMember.afterCreateMemberCounter)
}

// CreateMemberBeforeCounter returns a count of MembersRepositoryMock.CreateMember invocations
func (mmCreateMember *MembersRepositoryMock) CreateMemberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMember.beforeCreateMemberCounter)
}

// Calls returns a list of arguments used in each call to MembersRepositoryMock.CreateMember.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateMember *mMembersRepositoryMockCreateMember) Calls() []*MembersRepositoryMockCreateMemberParams {
	mmCreateMember.mutex.RLock()

	argCopy := make([]*MembersRepositoryMockCreateMemberParams, len(mmCreateMember.callArgs))
	copy(argCopy, mmCreateMember.callArgs)

	mmCreateMember.mutex.RUnlock()

	return argCopy
}

// MinimockCreateMemberDone returns true if the count of the CreateMember invocations corresponds
// the number of defined expectations
func (m *MembersRepositoryMock) MinimockCreateMemberDone() bool {
	if m.CreateMemberMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMemberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMemberMock.invocationsDone()
}

// MinimockCreateMemberInspect logs each unmet expectation
func (m *MembersRepositoryMock) MinimockCreateMemberInspect() {
	for _, e := range m.CreateMemberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MembersRepositoryMock.CreateMember at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateMemberCounter := mm_atomic.LoadUint64(&m.afterCreateMemberCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMemberMock.defaultExpectation != nil && afterCreateMemberCounter < 1 {
		if m.CreateMemberMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to MembersRepositoryMock.CreateMember at\n%s", m.CreateMemberMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to MembersRepositoryMock.CreateMember at\n%s with params: %#v", m.CreateMemberMock.defaultExpectation.expectationOrigins.origin, *m.CreateMemberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMember != nil && afterCreateMemberCounter < 1 {
		m.t.Errorf("Expected call to MembersRepositoryMock.CreateMember at\n%s", m.funcCreateMemberOrigin)
	}

	if !m.CreateMemberMock.invocationsDone() && afterCreateMemberCounter > 0 {
		m.t.Errorf("Expected %d calls to MembersRepositoryMock.CreateMember at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMemberMock.expectedInvocations), m.CreateMemberMock.expectedInvocationsOrigin, afterCreateMemberCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MembersRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckMemberExistsInspect()

			m.MinimockCreateMemberInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MembersRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MembersRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckMemberExistsDone() &&
		m.MinimockCreateMemberDone()
}
